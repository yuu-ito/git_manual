GIT-LOG(1)                        Git Manual                        GIT-LOG(1)



NNAAMMEE
       git-log - Show commit logs

SSYYNNOOPPSSIISS
       _g_i_t _l_o_g [<options>] [<since>..<until>] [[--] <path>...]

DDEESSCCRRIIPPTTIIOONN
       Shows the commit logs.

       The command takes options applicable to the _g_i_t _r_e_v_-_l_i_s_t command to
       control what is shown and how, and options applicable to the _g_i_t _d_i_f_f_-_*
       commands to control how the changes each commit introduces are shown.

OOPPTTIIOONNSS
       -<n>
           Limits the number of commits to show. Note that this is a commit
           limiting option, see below.

       <since>..<until>
           Show only commits between the named two commits. When either
           <since> or <until> is omitted, it defaults to HEAD, i.e. the tip of
           the current branch. For a more complete list of ways to spell
           <since> and <until>, see ggiittrreevviissiioonnss(7).

       --follow
           Continue listing the history of a file beyond renames (works only
           for a single file).

       --no-decorate, --decorate[=short|full|no]
           Print out the ref names of any commits that are shown. If _s_h_o_r_t is
           specified, the ref name prefixes _r_e_f_s_/_h_e_a_d_s_/, _r_e_f_s_/_t_a_g_s_/ and
           _r_e_f_s_/_r_e_m_o_t_e_s_/ will not be printed. If _f_u_l_l is specified, the full
           ref name (including prefix) will be printed. The default option is
           _s_h_o_r_t.

       --source
           Print out the ref name given on the command line by which each
           commit was reached.

       --full-diff
           Without this flag, "git log -p <path>..." shows commits that touch
           the specified paths, and diffs about the same specified paths. With
           this, the full diff is shown for commits that touch the specified
           paths; this means that "<path>..." limits only commits, and doesn't
           limit diff for those commits.

           Note that this affects all diff-based output types, e.g. those
           produced by --stat etc.

       --log-size
           Before the log message print out its size in bytes. Intended mainly
           for porcelain tools consumption. If git is unable to produce a
           valid value size is set to zero. Note that only message is
           considered, if also a diff is shown its size is not included.

       [--] <path>...
           Show only commits that affect any of the specified paths. To
           prevent confusion with options and branch names, paths may need to
           be prefixed with "-- " to separate them from options or refnames.

   CCoommmmiitt LLiimmiittiinngg
       Besides specifying a range of commits that should be listed using the
       special notations explained in the description, additional commit
       limiting may be applied. Note that they are applied before commit
       ordering and formatting options, such as _-_-_r_e_v_e_r_s_e.

       -n _n_u_m_b_e_r, --max-count=<number>
           Limit the number of commits to output.

       --skip=<number>
           Skip _n_u_m_b_e_r commits before starting to show the commit output.

       --since=<date>, --after=<date>
           Show commits more recent than a specific date.

       --until=<date>, --before=<date>
           Show commits older than a specific date.

       --author=<pattern>, --committer=<pattern>
           Limit the commits output to ones with author/committer header lines
           that match the specified pattern (regular expression).

       --grep=<pattern>
           Limit the commits output to ones with log message that matches the
           specified pattern (regular expression).

       --all-match
           Limit the commits output to ones that match all given --grep,
           --author and --committer instead of ones that match at least one.

       -i, --regexp-ignore-case
           Match the regexp limiting patterns without regard to letters case.

       -E, --extended-regexp
           Consider the limiting patterns to be extended regular expressions
           instead of the default basic regular expressions.

       -F, --fixed-strings
           Consider the limiting patterns to be fixed strings (don't interpret
           pattern as a regular expression).

       --remove-empty
           Stop when a given path disappears from the tree.

       --merges
           Print only merge commits. This is exactly the same as
           --min-parents=2.

       --no-merges
           Do not print commits with more than one parent. This is exactly the
           same as --max-parents=1.

       --min-parents=<number>, --max-parents=<number>, --no-min-parents,
       --no-max-parents
           Show only commits which have at least (or at most) that many
           commits. In particular, --max-parents=1 is the same as --no-merges,
           --min-parents=2 is the same as --merges.  --max-parents=0 gives all
           root commits and --min-parents=3 all octopus merges.

           --no-min-parents and --no-max-parents reset these limits (to no
           limit) again. Equivalent forms are --min-parents=0 (any commit has
           0 or more parents) and --max-parents=-1 (negative numbers denote no
           upper limit).

       --first-parent
           Follow only the first parent commit upon seeing a merge commit.
           This option can give a better overview when viewing the evolution
           of a particular topic branch, because merges into a topic branch
           tend to be only about adjusting to updated upstream from time to
           time, and this option allows you to ignore the individual commits
           brought in to your history by such a merge.

       --not
           Reverses the meaning of the _^ prefix (or lack thereof) for all
           following revision specifiers, up to the next _-_-_n_o_t.

       --all
           Pretend as if all the refs in refs/ are listed on the command line
           as _<_c_o_m_m_i_t_>.

       --branches[=<pattern>]
           Pretend as if all the refs in refs/heads are listed on the command
           line as _<_c_o_m_m_i_t_>. If _<_p_a_t_t_e_r_n_> is given, limit branches to ones
           matching given shell glob. If pattern lacks _?, _, _o_r _[_, _/ at the end
           is implied.

       --tags[=<pattern>]
           Pretend as if all the refs in refs/tags are listed on the command
           line as _<_c_o_m_m_i_t_>. If _<_p_a_t_t_e_r_n_> is given, limit tags to ones
           matching given shell glob. If pattern lacks _?, _, _o_r _[_, _/ at the end
           is implied.

       --remotes[=<pattern>]
           Pretend as if all the refs in refs/remotes are listed on the
           command line as _<_c_o_m_m_i_t_>. If _<_p_a_t_t_e_r_n_> is given, limit
           remote-tracking branches to ones matching given shell glob. If
           pattern lacks _?, _, _o_r _[_, _/ at the end is implied.

       --glob=<glob-pattern>
           Pretend as if all the refs matching shell glob _<_g_l_o_b_-_p_a_t_t_e_r_n_> are
           listed on the command line as _<_c_o_m_m_i_t_>. Leading _r_e_f_s_/, is
           automatically prepended if missing. If pattern lacks _?, _, _o_r _[_, _/
           at the end is implied.

       --bisect
           Pretend as if the bad bisection ref refs/bisect/bad was listed and
           as if it was followed by --not and the good bisection refs
           refs/bisect/good-* on the command line.

       --stdin
           In addition to the _<_c_o_m_m_i_t_> listed on the command line, read them
           from the standard input. If a _-_- separator is seen, stop reading
           commits and start reading paths to limit the result.

       --cherry-mark
           Like --cherry-pick (see below) but mark equivalent commits with =
           rather than omitting them, and inequivalent ones with +.

       --cherry-pick
           Omit any commit that introduces the same change as another commit
           on the "other side" when the set of commits are limited with
           symmetric difference.

           For example, if you have two branches, A and B, a usual way to list
           all commits on only one side of them is with --left-right (see the
           example below in the description of the --left-right option). It
           however shows the commits that were cherry-picked from the other
           branch (for example, "3rd on b" may be cherry-picked from branch
           A). With this option, such pairs of commits are excluded from the
           output.

       --left-only, --right-only
           List only commits on the respective side of a symmetric range, i.e.
           only those which would be marked < resp.  > by --left-right.

           For example, --cherry-pick --right-only A...B omits those commits
           from B which are in A or are patch-equivalent to a commit in A. In
           other words, this lists the + commits from git cherry A B. More
           precisely, --cherry-pick --right-only --no-merges gives the exact
           list.

       --cherry
           A synonym for --right-only --cherry-mark --no-merges; useful to
           limit the output to the commits on our side and mark those that
           have been applied to the other side of a forked history with git
           log --cherry upstream...mybranch, similar to git cherry upstream
           mybranch.

       -g, --walk-reflogs
           Instead of walking the commit ancestry chain, walk reflog entries
           from the most recent one to older ones. When this option is used
           you cannot specify commits to exclude (that is, _^_c_o_m_m_i_t,
           _c_o_m_m_i_t_1_._._c_o_m_m_i_t_2, nor _c_o_m_m_i_t_1_._._._c_o_m_m_i_t_2 notations cannot be used).

           With _-_-_p_r_e_t_t_y format other than oneline (for obvious reasons), this
           causes the output to have two extra lines of information taken from
           the reflog. By default, _c_o_m_m_i_t_@_{_N_t_h_} notation is used in the
           output. When the starting commit is specified as _c_o_m_m_i_t_@_{_n_o_w_},
           output also uses _c_o_m_m_i_t_@_{_t_i_m_e_s_t_a_m_p_} notation instead. Under
           _-_-_p_r_e_t_t_y_=_o_n_e_l_i_n_e, the commit message is prefixed with this
           information on the same line. This option cannot be combined with
           _-_-_r_e_v_e_r_s_e. See also ggiitt--rreefflloogg(1).

       --merge
           After a failed merge, show refs that touch files having a conflict
           and don't exist on all heads to merge.

       --boundary
           Output uninteresting commits at the boundary, which are usually not
           shown.

   HHiissttoorryy SSiimmpplliiffiiccaattiioonn
       Sometimes you are only interested in parts of the history, for example
       the commits modifying a particular <path>. But there are two parts of
       _H_i_s_t_o_r_y _S_i_m_p_l_i_f_i_c_a_t_i_o_n, one part is selecting the commits and the other
       is how to do it, as there are various strategies to simplify the
       history.

       The following options select the commits to be shown:

       <paths>
           Commits modifying the given <paths> are selected.

       --simplify-by-decoration
           Commits that are referred by some branch or tag are selected.

       Note that extra commits can be shown to give a meaningful history.

       The following options affect the way the simplification is performed:

       Default mode
           Simplifies the history to the simplest history explaining the final
           state of the tree. Simplest because it prunes some side branches if
           the end result is the same (i.e. merging branches with the same
           content)

       --full-history
           As the default mode but does not prune some history.

       --dense
           Only the selected commits are shown, plus some to have a meaningful
           history.

       --sparse
           All commits in the simplified history are shown.

       --simplify-merges
           Additional option to _-_-_f_u_l_l_-_h_i_s_t_o_r_y to remove some needless merges
           from the resulting history, as there are no selected commits
           contributing to this merge.

       --ancestry-path
           When given a range of commits to display (e.g.  _c_o_m_m_i_t_1_._._c_o_m_m_i_t_2 or
           _c_o_m_m_i_t_2 _^_c_o_m_m_i_t_1), only display commits that exist directly on the
           ancestry chain between the _c_o_m_m_i_t_1 and _c_o_m_m_i_t_2, i.e. commits that
           are both descendants of _c_o_m_m_i_t_1, and ancestors of _c_o_m_m_i_t_2.

       A more detailed explanation follows.

       Suppose you specified foo as the <paths>. We shall call commits that
       modify foo !TREESAME, and the rest TREESAME. (In a diff filtered for
       foo, they look different and equal, respectively.)

       In the following, we will always refer to the same example history to
       illustrate the differences between simplification settings. We assume
       that you are filtering for a file foo in this commit graph:

                     .-A---M---N---O---P
                    /     /   /   /   /
                   I     B   C   D   E
                    \   /   /   /   /
                     `-------------'


       The horizontal line of history A--P is taken to be the first parent of
       each merge. The commits are:

       +o    I is the initial commit, in which foo exists with contents "asdf",
           and a file quux exists with contents "quux". Initial commits are
           compared to an empty tree, so I is !TREESAME.

       +o   In A, foo contains just "foo".

       +o    B contains the same change as A. Its merge M is trivial and hence
           TREESAME to all parents.

       +o    C does not change foo, but its merge N changes it to "foobar", so
           it is not TREESAME to any parent.

       +o    D sets foo to "baz". Its merge O combines the strings from N and D
           to "foobarbaz"; i.e., it is not TREESAME to any parent.

       +o    E changes quux to "xyzzy", and its merge P combines the strings to
           "quux xyzzy". Despite appearing interesting, P is TREESAME to all
           parents.

       _r_e_v_-_l_i_s_t walks backwards through history, including or excluding
       commits based on whether _-_-_f_u_l_l_-_h_i_s_t_o_r_y and/or parent rewriting (via
       _-_-_p_a_r_e_n_t_s or _-_-_c_h_i_l_d_r_e_n) are used. The following settings are
       available.

       Default mode
           Commits are included if they are not TREESAME to any parent (though
           this can be changed, see _-_-_s_p_a_r_s_e below). If the commit was a
           merge, and it was TREESAME to one parent, follow only that parent.
           (Even if there are several TREESAME parents, follow only one of
           them.) Otherwise, follow all parents.

           This results in:

                         .-A---N---O
                        /     /   /
                       I---------D

           Note how the rule to only follow the TREESAME parent, if one is
           available, removed B from consideration entirely.  C was considered
           via N, but is TREESAME. Root commits are compared to an empty tree,
           so I is !TREESAME.

           Parent/child relations are only visible with --parents, but that
           does not affect the commits selected in default mode, so we have
           shown the parent lines.

       --full-history without parent rewriting
           This mode differs from the default in one point: always follow all
           parents of a merge, even if it is TREESAME to one of them. Even if
           more than one side of the merge has commits that are included, this
           does not imply that the merge itself is! In the example, we get

                       I  A  B  N  D  O

           P and M were excluded because they are TREESAME to a parent.  E, C
           and B were all walked, but only B was !TREESAME, so the others do
           not appear.

           Note that without parent rewriting, it is not really possible to
           talk about the parent/child relationships between the commits, so
           we show them disconnected.

       --full-history with parent rewriting
           Ordinary commits are only included if they are !TREESAME (though
           this can be changed, see _-_-_s_p_a_r_s_e below).

           Merges are always included. However, their parent list is
           rewritten: Along each parent, prune away commits that are not
           included themselves. This results in

                         .-A---M---N---O---P
                        /     /   /   /   /
                       I     B   /   D   /
                        \   /   /   /   /
                         `-------------'

           Compare to _-_-_f_u_l_l_-_h_i_s_t_o_r_y without rewriting above. Note that E was
           pruned away because it is TREESAME, but the parent list of P was
           rewritten to contain E's parent I. The same happened for C and N.
           Note also that P was included despite being TREESAME.

       In addition to the above settings, you can change whether TREESAME
       affects inclusion:

       --dense
           Commits that are walked are included if they are not TREESAME to
           any parent.

       --sparse
           All commits that are walked are included.

           Note that without _-_-_f_u_l_l_-_h_i_s_t_o_r_y, this still simplifies merges: if
           one of the parents is TREESAME, we follow only that one, so the
           other sides of the merge are never walked.

       --simplify-merges
           First, build a history graph in the same way that _-_-_f_u_l_l_-_h_i_s_t_o_r_y
           with parent rewriting does (see above).

           Then simplify each commit `C` to its replacement C' in the final
           history according to the following rules:

           +o   Set `C'` to C.

           +o   Replace each parent `P` of C' with its simplification `P'`. In
               the process, drop parents that are ancestors of other parents,
               and remove duplicates.

           +o   If after this parent rewriting, `C'` is a root or merge commit
               (has zero or >1 parents), a boundary commit, or !TREESAME, it
               remains. Otherwise, it is replaced with its only parent.
               The effect of this is best shown by way of comparing to
               _-_-_f_u_l_l_-_h_i_s_t_o_r_y with parent rewriting. The example turns into:

                             .-A---M---N---O
                            /     /       /
                           I     B       D
                            \   /       /
                             `---------'

               Note the major differences in N and P over _-_-_f_u_l_l_-_h_i_s_t_o_r_y:

               +o    N's parent list had I removed, because it is an ancestor
                   of the other parent M. Still, N remained because it is
                   !TREESAME.

               +o    P's parent list similarly had I removed.  P was then
                   removed completely, because it had one parent and is
                   TREESAME.

           Finally, there is a fifth simplification mode available:

           --ancestry-path
               Limit the displayed commits to those directly on the ancestry
               chain between the "from" and "to" commits in the given commit
               range. I.e. only display commits that are ancestor of the "to"
               commit, and descendants of the "from" commit.

               As an example use case, consider the following commit history:

                               D---E-------F
                              /     \       \
                             B---C---G---H---I---J
                            /                     \
                           A-------K---------------L--M

               A regular _D_._._M computes the set of commits that are ancestors
               of M, but excludes the ones that are ancestors of D. This is
               useful to see what happened to the history leading to M since
               D, in the sense that "what does M have that did not exist in
               D". The result in this example would be all the commits, except
               A and B (and D itself, of course).

               When we want to find out what commits in M are contaminated
               with the bug introduced by D and need fixing, however, we might
               want to view only the subset of _D_._._M that are actually
               descendants of D, i.e. excluding C and K. This is exactly what
               the _-_-_a_n_c_e_s_t_r_y_-_p_a_t_h option does. Applied to the _D_._._M range, it
               results in:

                                   E-------F
                                    \       \
                                     G---H---I---J
                                                  \
                                                   L--M


           The _-_-_s_i_m_p_l_i_f_y_-_b_y_-_d_e_c_o_r_a_t_i_o_n option allows you to view only the big
           picture of the topology of the history, by omitting commits that
           are not referenced by tags. Commits are marked as !TREESAME (in
           other words, kept after history simplification rules described
           above) if (1) they are referenced by tags, or (2) they change the
           contents of the paths given on the command line. All other commits
           are marked as TREESAME (subject to be simplified away).

   CCoommmmiitt OOrrddeerriinngg
       By default, the commits are shown in reverse chronological order.

       --topo-order
           This option makes them appear in topological order (i.e. descendant
           commits are shown before their parents).

       --date-order
           This option is similar to _-_-_t_o_p_o_-_o_r_d_e_r in the sense that no parent
           comes before all of its children, but otherwise things are still
           ordered in the commit timestamp order.

       --reverse
           Output the commits in reverse order. Cannot be combined with
           _-_-_w_a_l_k_-_r_e_f_l_o_g_s.

   OObbjjeecctt TTrraavveerrssaall
       These options are mostly targeted for packing of git repositories.

       --objects
           Print the object IDs of any object referenced by the listed
           commits.  _-_-_o_b_j_e_c_t_s _f_o_o _^_b_a_r thus means "send me all object IDs
           which I need to download if I have the commit object _b_a_r, but not
           _f_o_o".

       --objects-edge
           Similar to _-_-_o_b_j_e_c_t_s, but also print the IDs of excluded commits
           prefixed with a "-" character. This is used by ggiitt--ppaacckk--oobbjjeeccttss(1)
           to build "thin" pack, which records objects in deltified form based
           on objects contained in these excluded commits to reduce network
           traffic.

       --unpacked
           Only useful with _-_-_o_b_j_e_c_t_s; print the object IDs that are not in
           packs.

       --no-walk
           Only show the given revs, but do not traverse their ancestors.

       --do-walk
           Overrides a previous --no-walk.

   CCoommmmiitt FFoorrmmaattttiinngg
       --pretty[=<format>], --format=<format>
           Pretty-print the contents of the commit logs in a given format,
           where _<_f_o_r_m_a_t_> can be one of _o_n_e_l_i_n_e, _s_h_o_r_t, _m_e_d_i_u_m, _f_u_l_l, _f_u_l_l_e_r,
           _e_m_a_i_l, _r_a_w and _f_o_r_m_a_t_:_<_s_t_r_i_n_g_>. See the "PRETTY FORMATS" section
           for some additional details for each format. When omitted, the
           format defaults to _m_e_d_i_u_m.

           Note: you can specify the default pretty format in the repository
           configuration (see ggiitt--ccoonnffiigg(1)).

       --abbrev-commit
           Instead of showing the full 40-byte hexadecimal commit object name,
           show only a partial prefix. Non default number of digits can be
           specified with "--abbrev=<n>" (which also modifies diff output, if
           it is displayed).

           This should make "--pretty=oneline" a whole lot more readable for
           people using 80-column terminals.

       --oneline
           This is a shorthand for "--pretty=oneline --abbrev-commit" used
           together.

       --encoding[=<encoding>]
           The commit objects record the encoding used for the log message in
           their encoding header; this option can be used to tell the command
           to re-code the commit log message in the encoding preferred by the
           user. For non plumbing commands this defaults to UTF-8.

       --no-notes, --show-notes[=<ref>]
           Show the notes (see ggiitt--nnootteess(1)) that annotate the commit, when
           showing the commit log message. This is the default for git log,
           git show and git whatchanged commands when there is no --pretty,
           --format nor --oneline option is given on the command line.

           With an optional argument, add this ref to the list of notes. The
           ref is taken to be in refs/notes/ if it is not qualified.

       --[no-]standard-notes
           Enable or disable populating the notes ref list from the
           _c_o_r_e_._n_o_t_e_s_R_e_f and _n_o_t_e_s_._d_i_s_p_l_a_y_R_e_f variables (or corresponding
           environment overrides). Enabled by default. See ggiitt--ccoonnffiigg(1).

       --relative-date
           Synonym for --date=relative.

       --date=(relative|local|default|iso|rfc|short|raw)
           Only takes effect for dates shown in human-readable format, such as
           when using "--pretty".  log.date config variable sets a default
           value for log command's --date option.

           --date=relative shows dates relative to the current time, e.g. "2
           hours ago".

           --date=local shows timestamps in user's local timezone.

           --date=iso (or --date=iso8601) shows timestamps in ISO 8601 format.

           --date=rfc (or --date=rfc2822) shows timestamps in RFC 2822 format,
           often found in E-mail messages.

           --date=short shows only date but not time, in YYYY-MM-DD format.

           --date=raw shows the date in the internal raw git format %s %z
           format.

           --date=default shows timestamps in the original timezone (either
           committer's or author's).

       --parents
           Print also the parents of the commit (in the form "commit
           parent..."). Also enables parent rewriting, see _H_i_s_t_o_r_y
           _S_i_m_p_l_i_f_i_c_a_t_i_o_n below.

       --children
           Print also the children of the commit (in the form "commit
           child..."). Also enables parent rewriting, see _H_i_s_t_o_r_y
           _S_i_m_p_l_i_f_i_c_a_t_i_o_n below.

       --left-right
           Mark which side of a symmetric diff a commit is reachable from.
           Commits from the left side are prefixed with < and those from the
           right with >. If combined with --boundary, those commits are
           prefixed with -.

           For example, if you have this topology:

                            y---b---b  branch B
                           / \ /
                          /   .
                         /   / \
                        o---x---a---a  branch A

           you would get an output like this:

                       $ git rev-list --left-right --boundary --pretty=oneline A...B

                       >bbbbbbb... 3rd on b
                       >bbbbbbb... 2nd on b
                       <aaaaaaa... 3rd on a
                       <aaaaaaa... 2nd on a
                       -yyyyyyy... 1st on b
                       -xxxxxxx... 1st on a


       --graph
           Draw a text-based graphical representation of the commit history on
           the left hand side of the output. This may cause extra lines to be
           printed in between commits, in order for the graph history to be
           drawn properly.

           This enables parent rewriting, see _H_i_s_t_o_r_y _S_i_m_p_l_i_f_i_c_a_t_i_o_n below.

           This implies the _-_-_t_o_p_o_-_o_r_d_e_r option by default, but the
           _-_-_d_a_t_e_-_o_r_d_e_r option may also be specified.

   DDiiffff FFoorrmmaattttiinngg
       Below are listed options that control the formatting of diff output.
       Some of them are specific to ggiitt--rreevv--lliisstt(1), however other diff
       options may be given. See ggiitt--ddiiffff--ffiilleess(1) for more options.

       -c
           With this option, diff output for a merge commit shows the
           differences from each of the parents to the merge result
           simultaneously instead of showing pairwise diff between a parent
           and the result one at a time. Furthermore, it lists only files
           which were modified from all parents.

       --cc
           This flag implies the _-_c options and further compresses the patch
           output by omitting uninteresting hunks whose contents in the
           parents have only two variants and the merge result picks one of
           them without modification.

       -m
           This flag makes the merge commits show the full diff like regular
           commits; for each merge parent, a separate log entry and diff is
           generated. An exception is that only diff against the first parent
           is shown when _-_-_f_i_r_s_t_-_p_a_r_e_n_t option is given; in that case, the
           output represents the changes the merge brought _i_n_t_o the
           then-current branch.

       -r
           Show recursive diffs.

       -t
           Show the tree objects in the diff output. This implies _-_r.

       -s
           Suppress diff output.

PPRREETTTTYY FFOORRMMAATTSS
       If the commit is a merge, and if the pretty-format is not _o_n_e_l_i_n_e,
       _e_m_a_i_l or _r_a_w, an additional line is inserted before the _A_u_t_h_o_r_: line.
       This line begins with "Merge: " and the sha1s of ancestral commits are
       printed, separated by spaces. Note that the listed commits may not
       necessarily be the list of the ddiirreecctt parent commits if you have
       limited your view of history: for example, if you are only interested
       in changes related to a certain directory or file.

       There are several built-in formats, and you can define additional
       formats by setting a pretty.<name> config option to either another
       format name, or a _f_o_r_m_a_t_: string, as described below (see ggiitt--
       ccoonnffiigg(1)). Here are the details of the built-in formats:

       +o    _o_n_e_l_i_n_e

               <sha1> <title line>

           This is designed to be as compact as possible.

       +o    _s_h_o_r_t

               commit <sha1>
               Author: <author>

               <title line>

       +o    _m_e_d_i_u_m

               commit <sha1>
               Author: <author>
               Date:   <author date>

               <title line>

               <full commit message>

       +o    _f_u_l_l

               commit <sha1>
               Author: <author>
               Commit: <committer>

               <title line>

               <full commit message>

       +o    _f_u_l_l_e_r

               commit <sha1>
               Author:     <author>
               AuthorDate: <author date>
               Commit:     <committer>
               CommitDate: <committer date>

               <title line>

               <full commit message>

       +o    _e_m_a_i_l

               From <sha1> <date>
               From: <author>
               Date: <author date>
               Subject: [PATCH] <title line>

               <full commit message>

       +o    _r_a_w

           The _r_a_w format shows the entire commit exactly as stored in the
           commit object. Notably, the SHA1s are displayed in full, regardless
           of whether --abbrev or --no-abbrev are used, and _p_a_r_e_n_t_s
           information show the true parent commits, without taking grafts nor
           history simplification into account.

       +o    _f_o_r_m_a_t_:_<_s_t_r_i_n_g_>

           The _f_o_r_m_a_t_:_<_s_t_r_i_n_g_> format allows you to specify which information
           you want to show. It works a little bit like printf format, with
           the notable exception that you get a newline with _%_n instead of _\_n.

           E.g, _f_o_r_m_a_t_:_"_T_h_e _a_u_t_h_o_r _o_f _%_h _w_a_s _%_a_n_, _%_a_r_%_n_T_h_e _t_i_t_l_e _w_a_s _>_>_%_s_<_<_%_n_"
           would show something like this:

               The author of fe6e0ee was Junio C Hamano, 23 hours ago
               The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<

           The placeholders are:

           +o    _%_H: commit hash

           +o    _%_h: abbreviated commit hash

           +o    _%_T: tree hash

           +o    _%_t: abbreviated tree hash

           +o    _%_P: parent hashes

           +o    _%_p: abbreviated parent hashes

           +o    _%_a_n: author name

           +o    _%_a_N: author name (respecting .mailmap, see ggiitt--sshhoorrttlloogg(1) or
               ggiitt--bbllaammee(1))

           +o    _%_a_e: author email

           +o    _%_a_E: author email (respecting .mailmap, see ggiitt--sshhoorrttlloogg(1) or
               ggiitt--bbllaammee(1))

           +o    _%_a_d: author date (format respects --date= option)

           +o    _%_a_D: author date, RFC2822 style

           +o    _%_a_r: author date, relative

           +o    _%_a_t: author date, UNIX timestamp

           +o    _%_a_i: author date, ISO 8601 format

           +o    _%_c_n: committer name

           +o    _%_c_N: committer name (respecting .mailmap, see ggiitt--sshhoorrttlloogg(1)
               or ggiitt--bbllaammee(1))

           +o    _%_c_e: committer email

           +o    _%_c_E: committer email (respecting .mailmap, see ggiitt--sshhoorrttlloogg(1)
               or ggiitt--bbllaammee(1))

           +o    _%_c_d: committer date

           +o    _%_c_D: committer date, RFC2822 style

           +o    _%_c_r: committer date, relative

           +o    _%_c_t: committer date, UNIX timestamp

           +o    _%_c_i: committer date, ISO 8601 format

           +o    _%_d: ref names, like the --decorate option of ggiitt--lloogg(1)

           +o    _%_e: encoding

           +o    _%_s: subject

           +o    _%_f: sanitized subject line, suitable for a filename

           +o    _%_b: body

           +o    _%_B: raw body (unwrapped subject and body)

           +o    _%_N: commit notes

           +o    _%_g_D: reflog selector, e.g., refs/stash@{1}

           +o    _%_g_d: shortened reflog selector, e.g., stash@{1}

           +o    _%_g_s: reflog subject

           +o    _%_C_r_e_d: switch color to red

           +o    _%_C_g_r_e_e_n: switch color to green

           +o    _%_C_b_l_u_e: switch color to blue

           +o    _%_C_r_e_s_e_t: reset color

           +o    _%_C_(_._._._): color specification, as described in color.branch.*
               config option

           +o    _%_m: left, right or boundary mark

           +o    _%_n: newline

           +o    _%_%: a raw _%

           +o    _%_x_0_0: print a byte from a hex code

           +o    _%_w_(_[_<_w_>_[_,_<_i_1_>_[_,_<_i_2_>_]_]_]_): switch line wrapping, like the -w
               option of ggiitt--sshhoorrttlloogg(1).

           NNoottee
           Some placeholders may depend on other options given to the revision
           traversal engine. For example, the %g* reflog options will insert
           an empty string unless we are traversing reflog entries (e.g., by
           git log -g). The %d placeholder will use the "short" decoration
           format if --decorate was not already provided on the command line.

       If you add a + (plus sign) after _% of a placeholder, a line-feed is
       inserted immediately before the expansion if and only if the
       placeholder expands to a non-empty string.

       If you add a - (minus sign) after _% of a placeholder, line-feeds that
       immediately precede the expansion are deleted if and only if the
       placeholder expands to an empty string.

       If you add a ` ` (space) after _% of a placeholder, a space is inserted
       immediately before the expansion if and only if the placeholder expands
       to a non-empty string.

       +o    _t_f_o_r_m_a_t_:

           The _t_f_o_r_m_a_t_: format works exactly like _f_o_r_m_a_t_:, except that it
           provides "terminator" semantics instead of "separator" semantics.
           In other words, each commit has the message terminator character
           (usually a newline) appended, rather than a separator placed
           between entries. This means that the final entry of a single-line
           format will be properly terminated with a new line, just as the
           "oneline" format does. For example:

               $ git log -2 --pretty=format:%h 4da45bef \
                 | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
               4da45be
               7134973 -- NO NEWLINE

               $ git log -2 --pretty=tformat:%h 4da45bef \
                 | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
               4da45be
               7134973

           In addition, any unrecognized string that has a % in it is
           interpreted as if it has tformat: in front of it. For example,
           these two are equivalent:

               $ git log -2 --pretty=tformat:%h 4da45bef
               $ git log -2 --pretty=%h 4da45bef


CCOOMMMMOONN DDIIFFFF OOPPTTIIOONNSS
       -p, -u, --patch
           Generate patch (see section on generating patches).

       -U<n>, --unified=<n>
           Generate diffs with <n> lines of context instead of the usual
           three. Implies -p.

       --raw
           Generate the raw format.

       --patch-with-raw
           Synonym for -p --raw.

       --patience
           Generate a diff using the "patience diff" algorithm.

       --stat[=<width>[,<name-width>]]
           Generate a diffstat. You can override the default output width for
           80-column terminal by --stat=<width>. The width of the filename
           part can be controlled by giving another width to it separated by a
           comma.

       --numstat
           Similar to --stat, but shows number of added and deleted lines in
           decimal notation and pathname without abbreviation, to make it more
           machine friendly. For binary files, outputs two - instead of saying
           0 0.

       --shortstat
           Output only the last line of the --stat format containing total
           number of modified files, as well as number of added and deleted
           lines.

       --dirstat[=<limit>]
           Output the distribution of relative amount of changes (number of
           lines added or removed) for each sub-directory. Directories with
           changes below a cut-off percent (3% by default) are not shown. The
           cut-off percent can be set with --dirstat=<limit>. Changes in a
           child directory are not counted for the parent directory, unless
           --cumulative is used.

           Note that the --dirstat option computes the changes while ignoring
           the amount of pure code movements within a file. In other words,
           rearranging lines in a file is not counted as much as other
           changes.

       --dirstat-by-file[=<limit>]
           Same as --dirstat, but counts changed files instead of lines.

       --summary
           Output a condensed summary of extended header information such as
           creations, renames and mode changes.

       --patch-with-stat
           Synonym for -p --stat.

       -z
           Separate the commits with NULs instead of with new newlines.

           Also, when --raw or --numstat has been given, do not munge
           pathnames and use NULs as output field terminators.

           Without this option, each pathname output will have TAB, LF, double
           quotes, and backslash characters replaced with \t, \n, \", and \\,
           respectively, and the pathname will be enclosed in double quotes if
           any of those replacements occurred.

       --name-only
           Show only names of changed files.

       --name-status
           Show only names and status of changed files. See the description of
           the --diff-filter option on what the status letters mean.

       --submodule[=<format>]
           Chose the output format for submodule differences. <format> can be
           one of _s_h_o_r_t and _l_o_g.  _s_h_o_r_t just shows pairs of commit names, this
           format is used when this option is not given.  _l_o_g is the default
           value for this option and lists the commits in that commit range
           like the _s_u_m_m_a_r_y option of ggiitt--ssuubbmmoodduullee(1) does.

       --color[=<when>]
           Show colored diff. The value must be always (the default for
           <when>), never, or auto. The default value is never.

       --no-color
           Turn off colored diff. It is the same as --color=never.

       --word-diff[=<mode>]
           Show a word diff, using the <mode> to delimit changed words. By
           default, words are delimited by whitespace; see --word-diff-regex
           below. The <mode> defaults to _p_l_a_i_n, and must be one of:

           color
               Highlight changed words using only colors. Implies --color.

           plain
               Show words as [-removed-] and {added}. Makes no attempts to
               escape the delimiters if they appear in the input, so the
               output may be ambiguous.

           porcelain
               Use a special line-based format intended for script
               consumption. Added/removed/unchanged runs are printed in the
               usual unified diff format, starting with a +/-/` ` character at
               the beginning of the line and extending to the end of the line.
               Newlines in the input are represented by a tilde ~ on a line of
               its own.

           none
               Disable word diff again.

           Note that despite the name of the first mode, color is used to
           highlight the changed parts in all modes if enabled.

       --word-diff-regex=<regex>
           Use <regex> to decide what a word is, instead of considering runs
           of non-whitespace to be a word. Also implies --word-diff unless it
           was already enabled.

           Every non-overlapping match of the <regex> is considered a word.
           Anything between these matches is considered whitespace and
           ignored(!) for the purposes of finding differences. You may want to
           append |[^[:space:]] to your regular expression to make sure that
           it matches all non-whitespace characters. A match that contains a
           newline is silently truncated(!) at the newline.

           The regex can also be set via a diff driver or configuration
           option, see ggiittaattttrriibbuutteess(1) or ggiitt--ccoonnffiigg(1). Giving it explicitly
           overrides any diff driver or configuration setting. Diff drivers
           override configuration settings.

       --color-words[=<regex>]
           Equivalent to --word-diff=color plus (if a regex was specified)
           --word-diff-regex=<regex>.

       --no-renames
           Turn off rename detection, even when the configuration file gives
           the default to do so.

       --check
           Warn if changes introduce trailing whitespace or an indent that
           uses a space before a tab. Exits with non-zero status if problems
           are found. Not compatible with --exit-code.

       --full-index
           Instead of the first handful of characters, show the full pre- and
           post-image blob object names on the "index" line when generating
           patch format output.

       --binary
           In addition to --full-index, output a binary diff that can be
           applied with git-apply.

       --abbrev[=<n>]
           Instead of showing the full 40-byte hexadecimal object name in
           diff-raw format output and diff-tree header lines, show only a
           partial prefix. This is independent of the --full-index option
           above, which controls the diff-patch output format. Non default
           number of digits can be specified with --abbrev=<n>.

       -B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]
           Break complete rewrite changes into pairs of delete and create.
           This serves two purposes:

           It affects the way a change that amounts to a total rewrite of a
           file not as a series of deletion and insertion mixed together with
           a very few lines that happen to match textually as the context, but
           as a single deletion of everything old followed by a single
           insertion of everything new, and the number m controls this aspect
           of the -B option (defaults to 60%).  -B/70% specifies that less
           than 30% of the original should remain in the result for git to
           consider it a total rewrite (i.e. otherwise the resulting patch
           will be a series of deletion and insertion mixed together with
           context lines).

           When used with -M, a totally-rewritten file is also considered as
           the source of a rename (usually -M only considers a file that
           disappeared as the source of a rename), and the number n controls
           this aspect of the -B option (defaults to 50%).  -B20% specifies
           that a change with addition and deletion compared to 20% or more of
           the file's size are eligible for being picked up as a possible
           source of a rename to another file.

       -M[<n>], --find-renames[=<n>]
           If generating diffs, detect and report renames for each commit. For
           following files across renames while traversing history, see
           --follow. If n is specified, it is a threshold on the similarity
           index (i.e. amount of addition/deletions compared to the file's
           size). For example, -M90% means git should consider a delete/add
           pair to be a rename if more than 90% of the file hasn't changed.

       -C[<n>], --find-copies[=<n>]
           Detect copies as well as renames. See also --find-copies-harder. If
           n is specified, it has the same meaning as for -M<n>.

       --find-copies-harder
           For performance reasons, by default, -C option finds copies only if
           the original file of the copy was modified in the same changeset.
           This flag makes the command inspect unmodified files as candidates
           for the source of copy. This is a very expensive operation for
           large projects, so use it with caution. Giving more than one -C
           option has the same effect.

       -l<num>
           The -M and -C options require O(n^2) processing time where n is the
           number of potential rename/copy targets. This option prevents
           rename/copy detection from running if the number of rename/copy
           targets exceeds the specified number.

       --diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]
           Select only files that are Added (A), Copied (C), Deleted (D),
           Modified (M), Renamed (R), have their type (i.e. regular file,
           symlink, submodule, ...) changed (T), are Unmerged (U), are Unknown
           (X), or have had their pairing Broken (B). Any combination of the
           filter characters (including none) can be used. When *
           (All-or-none) is added to the combination, all paths are selected
           if there is any file that matches other criteria in the comparison;
           if there is no file that matches other criteria, nothing is
           selected.

       -S<string>
           Look for differences that introduce or remove an instance of
           <string>. Note that this is different than the string simply
           appearing in diff output; see the _p_i_c_k_a_x_e entry in ggiittddiiffffccoorree(7)
           for more details.

       -G<regex>
           Look for differences whose added or removed line matches the given
           <regex>.

       --pickaxe-all
           When -S or -G finds a change, show all the changes in that
           changeset, not just the files that contain the change in <string>.

       --pickaxe-regex
           Make the <string> not a plain string but an extended POSIX regex to
           match.

       -O<orderfile>
           Output the patch in the order specified in the <orderfile>, which
           has one shell glob pattern per line.

       -R
           Swap two inputs; that is, show differences from index or on-disk
           file to tree contents.

       --relative[=<path>]
           When run from a subdirectory of the project, it can be told to
           exclude changes outside the directory and show pathnames relative
           to it with this option. When you are not in a subdirectory (e.g. in
           a bare repository), you can name which subdirectory to make the
           output relative to by giving a <path> as an argument.

       -a, --text
           Treat all files as text.

       --ignore-space-at-eol
           Ignore changes in whitespace at EOL.

       -b, --ignore-space-change
           Ignore changes in amount of whitespace. This ignores whitespace at
           line end, and considers all other sequences of one or more
           whitespace characters to be equivalent.

       -w, --ignore-all-space
           Ignore whitespace when comparing lines. This ignores differences
           even if one line has whitespace where the other line has none.

       --inter-hunk-context=<lines>
           Show the context between diff hunks, up to the specified number of
           lines, thereby fusing hunks that are close to each other.

       --exit-code
           Make the program exit with codes similar to diff(1). That is, it
           exits with 1 if there were differences and 0 means no differences.

       --quiet
           Disable all output of the program. Implies --exit-code.

       --ext-diff
           Allow an external diff helper to be executed. If you set an
           external diff driver with ggiittaattttrriibbuutteess(5), you need to use this
           option with ggiitt--lloogg(1) and friends.

       --no-ext-diff
           Disallow external diff drivers.

       --ignore-submodules[=<when>]
           Ignore changes to submodules in the diff generation. <when> can be
           either "none", "untracked", "dirty" or "all", which is the default
           Using "none" will consider the submodule modified when it either
           contains untracked or modified files or its HEAD differs from the
           commit recorded in the superproject and can be used to override any
           settings of the _i_g_n_o_r_e option in ggiitt--ccoonnffiigg(1) or ggiittmmoodduulleess(5).
           When "untracked" is used submodules are not considered dirty when
           they only contain untracked content (but they are still scanned for
           modified content). Using "dirty" ignores all changes to the work
           tree of submodules, only changes to the commits stored in the
           superproject are shown (this was the behavior until 1.7.0). Using
           "all" hides all changes to submodules.

       --src-prefix=<prefix>
           Show the given source prefix instead of "a/".

       --dst-prefix=<prefix>
           Show the given destination prefix instead of "b/".

       --no-prefix
           Do not show any source or destination prefix.

       For more detailed explanation on these common options, see also
       ggiittddiiffffccoorree(7).

GGEENNEERRAATTIINNGG PPAATTCCHHEESS WWIITTHH --PP
       When "git-diff-index", "git-diff-tree", or "git-diff-files" are run
       with a _-_p option, "git diff" without the _-_-_r_a_w option, or "git log"
       with the "-p" option, they do not produce the output described above;
       instead they produce a patch file. You can customize the creation of
       such patches via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS
       environment variables.

       What the -p option produces is slightly different from the traditional
       diff format:

        1. It is preceded with a "git diff" header that looks like this:

               diff --git a/file1 b/file2

           The a/ and b/ filenames are the same unless rename/copy is
           involved. Especially, even for a creation or a deletion, /dev/null
           is _n_o_t used in place of the a/ or b/ filenames.

           When rename/copy is involved, file1 and file2 show the name of the
           source file of the rename/copy and the name of the file that
           rename/copy produces, respectively.

        2. It is followed by one or more extended header lines:

               old mode <mode>
               new mode <mode>
               deleted file mode <mode>
               new file mode <mode>
               copy from <path>
               copy to <path>
               rename from <path>
               rename to <path>
               similarity index <number>
               dissimilarity index <number>
               index <hash>..<hash> <mode>

           File modes are printed as 6-digit octal numbers including the file
           type and file permission bits.

           Path names in extended headers do not include the a/ and b/
           prefixes.

           The similarity index is the percentage of unchanged lines, and the
           dissimilarity index is the percentage of changed lines. It is a
           rounded down integer, followed by a percent sign. The similarity
           index value of 100% is thus reserved for two equal files, while
           100% dissimilarity means that no line from the old file made it
           into the new one.

           The index line includes the SHA-1 checksum before and after the
           change. The <mode> is included if the file mode does not change;
           otherwise, separate lines indicate the old and the new mode.

        3. TAB, LF, double quote and backslash characters in pathnames are
           represented as \t, \n, \" and \\, respectively. If there is need
           for such substitution then the whole pathname is put in double
           quotes.

        4. All the file1 files in the output refer to files before the commit,
           and all the file2 files refer to files after the commit. It is
           incorrect to apply each change to each file sequentially. For
           example, this patch will swap a and b:

               diff --git a/a b/b
               rename from a
               rename to b
               diff --git a/b b/a
               rename from b
               rename to a

CCOOMMBBIINNEEDD DDIIFFFF FFOORRMMAATT
       Any diff-generating command can take the `-c` or --cc option to produce
       a _c_o_m_b_i_n_e_d _d_i_f_f when showing a merge. This is the default format when
       showing merges with ggiitt--ddiiffff(1) or ggiitt--sshhooww(1). Note also that you can
       give the `-m' option to any of these commands to force generation of
       diffs with individual parents of a merge.

       A _c_o_m_b_i_n_e_d _d_i_f_f format looks like this:

           diff --combined describe.c
           index fabadb8,cc95eb0..4866510
           --- a/describe.c
           +++ b/describe.c
           @@@ -98,20 -98,12 +98,20 @@@
                   return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;
             }

           - static void describe(char *arg)
            -static void describe(struct commit *cmit, int last_one)
           ++static void describe(char *arg, int last_one)
             {
            +      unsigned char sha1[20];
            +      struct commit *cmit;
                   struct commit_list *list;
                   static int initialized = 0;
                   struct commit_name *n;

            +      if (get_sha1(arg, sha1) < 0)
            +              usage(describe_usage);
            +      cmit = lookup_commit_reference(sha1);
            +      if (!cmit)
            +              usage(describe_usage);
            +
                   if (!initialized) {
                           initialized = 1;
                           for_each_ref(get_name);



        1. It is preceded with a "git diff" header, that looks like this (when
           _-_c option is used):

               diff --combined file

           or like this (when _-_-_c_c option is used):

               diff --cc file

        2. It is followed by one or more extended header lines (this example
           shows a merge with two parents):

               index <hash>,<hash>..<hash>
               mode <mode>,<mode>..<mode>
               new file mode <mode>
               deleted file mode <mode>,<mode>

           The mode <mode>,<mode>..<mode> line appears only if at least one of
           the <mode> is different from the rest. Extended headers with
           information about detected contents movement (renames and copying
           detection) are designed to work with diff of two <tree-ish> and are
           not used by combined diff format.

        3. It is followed by two-line from-file/to-file header

               --- a/file
               +++ b/file

           Similar to two-line header for traditional _u_n_i_f_i_e_d diff format,
           /dev/null is used to signal created or deleted files.

        4. Chunk header format is modified to prevent people from accidentally
           feeding it to patch -p1. Combined diff format was created for
           review of merge commit changes, and was not meant for apply. The
           change is similar to the change in the extended _i_n_d_e_x header:

               @@@ <from-file-range> <from-file-range> <to-file-range> @@@

           There are (number of parents + 1) @ characters in the chunk header
           for combined diff format.

       Unlike the traditional _u_n_i_f_i_e_d diff format, which shows two files A and
       B with a single column that has - (minus -- appears in A but removed in
       B), + (plus -- missing in A but added to B), or " " (space --
       unchanged) prefix, this format compares two or more files file1,
       file2,... with one file X, and shows how X differs from each of fileN.
       One column for each of fileN is prepended to the output line to note
       how X's line is different from it.

       A - character in the column N means that the line appears in fileN but
       it does not appear in the result. A + character in the column N means
       that the line appears in the result, and fileN does not have that line
       (in other words, the line was added, from the point of view of that
       parent).

       In the above example output, the function signature was changed from
       both files (hence two - removals from both file1 and file2, plus ++ to
       mean one line that was added does not appear in either file1 nor
       file2). Also eight other lines are the same from file1 but do not
       appear in file2 (hence prefixed with +).

       When shown by git diff-tree -c, it compares the parents of a merge
       commit with the merge result (i.e. file1..fileN are the parents). When
       shown by git diff-files -c, it compares the two unresolved merge
       parents with the working tree file (i.e. file1 is stage 2 aka "our
       version", file2 is stage 3 aka "their version").

EEXXAAMMPPLLEESS
       git log --no-merges
           Show the whole commit history, but skip any merges

       git log v2.6.12.. include/scsi drivers/scsi
           Show all commits since version _v_2_._6_._1_2 that changed any file in the
           include/scsi or drivers/scsi subdirectories

       git log --since="2 weeks ago" -- gitk
           Show the changes during the last two weeks to the file _g_i_t_k. The
           "--" is necessary to avoid confusion with the bbrraanncchh named _g_i_t_k

       git log --name-status release..test
           Show the commits that are in the "test" branch but not yet in the
           "release" branch, along with the list of paths each commit
           modifies.

       git log --follow builtin-rev-list.c
           Shows the commits that changed builtin-rev-list.c, including those
           commits that occurred before the file was given its present name.

       git log --branches --not --remotes=origin
           Shows all commits that are in any of local branches but not in any
           of remote-tracking branches for _o_r_i_g_i_n (what you have that origin
           doesn't).

       git log master --not --remotes=*/master
           Shows all commits that are in local master but not in any remote
           repository master branches.

       git log -p -m --first-parent
           Shows the history including change diffs, but only from the "main
           branch" perspective, skipping commits that come from merged
           branches, and showing full diffs of changes introduced by the
           merges. This makes sense only when following a strict policy of
           merging all topic branches when staying on a single integration
           branch.

DDIISSCCUUSSSSIIOONN
       At the core level, git is character encoding agnostic.

       +o   The pathnames recorded in the index and in the tree objects are
           treated as uninterpreted sequences of non-NUL bytes. What
           readdir(2) returns are what are recorded and compared with the data
           git keeps track of, which in turn are expected to be what lstat(2)
           and creat(2) accepts. There is no such thing as pathname encoding
           translation.

       +o   The contents of the blob objects are uninterpreted sequences of
           bytes. There is no encoding translation at the core level.

       +o   The commit log messages are uninterpreted sequences of non-NUL
           bytes.

       Although we encourage that the commit log messages are encoded in
       UTF-8, both the core and git Porcelain are designed not to force UTF-8
       on projects. If all participants of a particular project find it more
       convenient to use legacy encodings, git does not forbid it. However,
       there are a few things to keep in mind.

        1.  _g_i_t _c_o_m_m_i_t and _g_i_t _c_o_m_m_i_t_-_t_r_e_e issues a warning if the commit log
           message given to it does not look like a valid UTF-8 string, unless
           you explicitly say your project uses a legacy encoding. The way to
           say this is to have i18n.commitencoding in .git/config file, like
           this:

               [i18n]
                       commitencoding = ISO-8859-1

           Commit objects created with the above setting record the value of
           i18n.commitencoding in its encoding header. This is to help other
           people who look at them later. Lack of this header implies that the
           commit log message is encoded in UTF-8.

        2.  _g_i_t _l_o_g, _g_i_t _s_h_o_w, _g_i_t _b_l_a_m_e and friends look at the encoding
           header of a commit object, and try to re-code the log message into
           UTF-8 unless otherwise specified. You can specify the desired
           output encoding with i18n.logoutputencoding in .git/config file,
           like this:

               [i18n]
                       logoutputencoding = ISO-8859-1

           If you do not have this configuration variable, the value of
           i18n.commitencoding is used instead.

       Note that we deliberately chose not to re-code the commit log message
       when a commit is made to force UTF-8 at the commit object level,
       because re-coding to UTF-8 is not necessarily a reversible operation.

CCOONNFFIIGGUURRAATTIIOONN
       See ggiitt--ccoonnffiigg(1) for core variables and ggiitt--ddiiffff(1) for settings
       related to diff generation.

       format.pretty
           Default for the --format option. (See "PRETTY FORMATS" above.)
           Defaults to "medium".

       i18n.logOutputEncoding
           Encoding to use when displaying logs. (See "Discussion", above.)
           Defaults to the value of i18n.commitEncoding if set, UTF-8
           otherwise.

       log.date
           Default format for human-readable dates. (Compare the --date
           option.) Defaults to "default", which means to write dates like Sat
           May 8 19:35:34 2010 -0500.

       log.showroot
           If false, _g_i_t _l_o_g and related commands will not treat the initial
           commit as a big creation event. Any root commits in git log -p
           output would be shown without a diff attached. The default is true.

       mailmap.file
           See ggiitt--sshhoorrttlloogg(1).

       notes.displayRef
           Which refs, in addition to the default set by core.notesRef or
           _G_I_T___N_O_T_E_S___R_E_F, to read notes from when showing commit messages with
           the _l_o_g family of commands. See ggiitt--nnootteess(1).

           May be an unabbreviated ref name or a glob and may be specified
           multiple times. A warning will be issued for refs that do not
           exist, but a glob that does not match any refs is silently ignored.

           This setting can be disabled by the --no-standard-notes option,
           overridden by the _G_I_T___N_O_T_E_S___D_I_S_P_L_A_Y___R_E_F environment variable, and
           supplemented by the --show-notes option.

GGIITT
       Part of the ggiitt(1) suite



Git 1.7.5.4                       06/01/2011                        GIT-LOG(1)
